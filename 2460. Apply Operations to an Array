#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

It came out a little rough, but I'm okay with it.

"""

class Solution:
    def applyOperations(self, nums: List[int]) -> List[int]:
        size = len(nums)
        for i in range(size - 1):
            if nums[i] == nums[i + 1]:
                nums[i] = nums[i] * 2
                nums[i + 1] = 0
        z_pos, shift = 0, 0
        for i_ in range(size):
            if nums[i_] != 0:
                nums[z_pos] = nums[i_]
                z_pos += 1
            elif shift == 0:
                z_pos = i_
                shift += 1
            else:
                shift += 1
        return nums[:size - shift] + [0] * (shift)

