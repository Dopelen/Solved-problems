#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(3 ** (2 * m) * n) complexity by time and O(3 ** (2 * m)) by space.

This problem is understandable by reading the solution, but composing it myself is still too difficult for me.
"""

# https://leetcode.com/problems/painting-a-grid-with-three-different-colors/solutions/6737784/painting-a-grid-with-three-different-colors/?envType=daily-question&envId=2025-05-18

class Solution:
    def colorTheGrid(self, m: int, n: int) -> int:
        mod = 10**9 + 7
        valid = dict()
        for mask in range(3**m):
            color = list()
            mm = mask
            for i in range(m):
                color.append(mm % 3)
                mm //= 3
            if any(color[i] == color[i + 1] for i in range(m - 1)):
                continue
            valid[mask] = color
        adjacent = defaultdict(list)
        for mask1, color1 in valid.items():
            for mask2, color2 in valid.items():
                if not any(x == y for x, y in zip(color1, color2)):
                    adjacent[mask1].append(mask2)

        f = [int(mask in valid) for mask in range(3**m)]
        for i in range(1, n):
            g = [0] * (3**m)
            for mask2 in valid.keys():
                for mask1 in adjacent[mask2]:
                    g[mask2] += f[mask1]
                    if g[mask2] >= mod:
                        g[mask2] -= mod
            f = g
        return sum(f) % mod
