#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n(log(n))) complexity by time and O(1) by space.

Another daily task, and although I have used binary search many times, I still face the problem of how to apply it to each specific problem.
I know the algorithm, but how exactly to apply it is much more complicated.

"""

class Solution:
    def maxDistance(self, position: List[int], m: int) -> int:
        position.sort()
        left, right = 1, position[-1] - position[0]
        ans = -1
        while left <= right:
            mid = left + (right - left) // 2
            last_pos, ball = position[0], 1
            for i in range(1, len(position)):
                if position[i] - last_pos >= mid:
                    last_pos = position[i]
                    ball += 1
            if ball >= m:
                ans = mid
                left = mid + 1
            else:
                right = mid - 1
        return ans
