#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 3) complexity by time and O(n ** 2) by space.

One of the problems that has a specific mathematical/geometric context, which is why solving a problem boils down to you spending most of your time understanding what the problem means and why.
The problem boils down to dividing a polygon into disjoint triangles and calculating their "cost." 
Dynamic programming is used, but I couldn't solve it myself.
"""

# https://leetcode.com/problems/minimum-score-triangulation-of-polygon/editorial/?envType=daily-question&envId=2025-09-29
class Solution:
    def minScoreTriangulation(self, values: List[int]) -> int:
        @lru_cache(None)
        def dp(i, j):
            if i + 2 > j:
                return 0
            if i + 2 == j:
                return values[i] * values[i + 1] * values[j]
            return min(
                (values[i] * values[k] * values[j] + dp(i, k) + dp(k, j))
                for k in range(i + 1, j)
            )

        return dp(0, len(values) - 1)
