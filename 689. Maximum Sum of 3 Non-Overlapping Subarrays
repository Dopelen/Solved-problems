#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

The bombardment of heavy tasks on leetcode before the New Year hit me, I didn't have the strength to solve this one.
Two main approaches:
1. 3 sliding windows
2. Dynamic programming

For me, the sliding windows seemed clearer, although it can also be written in different ways.
"""

# Short and hard
# https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/solutions/4041034/python-3-10-lines-prefix-sum-zip-ts-100-eancd/
class Solution:
    def maxSumOfThreeSubarrays(self, nums, k):
        sm1 = sm2 = sm3 = 0
        acc = list(accumulate(nums, initial = 0))
        for i, (a0,a1,a2,a3) in enumerate(zip(acc      ,
                                              acc[k:]  , 
                                              acc[2*k:], 
                                              acc[3*k:])):
            if a1 - a0 > sm1:
                sm1, idx1 = a1 - a0, i

            if a2 - a1 > sm2 - sm1:
                sm2, idx2 = sm1 + a2 - a1, (idx1, i+k)

            if a3 - a2 > sm3 - sm2:
                sm3, idx3 = sm2 + a3 - a2, (*idx2, i+2*k)

        return idx3

# Big and easy
# https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/solutions/108238/python-on-time-o1-space-sliding-windows-6t1cl/
class Solution:
    def maxSumOfThreeSubarrays(self, nums, k):
        bestSeq = 0
        bestTwoSeq = [0, k]
        bestThreeSeq = [0, k, k*2]

        seqSum = sum(nums[0:k])
        seqTwoSum = sum(nums[k:k*2])
        seqThreeSum = sum(nums[k*2:k*3])

        bestSeqSum = seqSum
        bestTwoSum = seqSum + seqTwoSum
        bestThreeSum = seqSum + seqTwoSum + seqThreeSum

        seqIndex = 1
        twoSeqIndex = k + 1
        threeSeqIndex = k*2 + 1
        while threeSeqIndex <= len(nums) - k:
            seqSum = seqSum - nums[seqIndex - 1] + nums[seqIndex + k - 1]
            seqTwoSum = seqTwoSum - nums[twoSeqIndex - 1] + nums[twoSeqIndex + k - 1]
            seqThreeSum = seqThreeSum - nums[threeSeqIndex - 1] + nums[threeSeqIndex + k - 1]
            
            if seqSum > bestSeqSum:
                bestSeq = seqIndex
                bestSeqSum = seqSum

            if seqTwoSum + bestSeqSum > bestTwoSum:
                bestTwoSeq = [bestSeq, twoSeqIndex]
                bestTwoSum = seqTwoSum + bestSeqSum

            if seqThreeSum + bestTwoSum > bestThreeSum:
                bestThreeSeq = bestTwoSeq + [threeSeqIndex]
                bestThreeSum = seqThreeSum + bestTwoSum

            seqIndex += 1
            twoSeqIndex += 1
            threeSeqIndex += 1

        return bestThreeSeq
