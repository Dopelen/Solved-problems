#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(k * n) complexity by time and O(k) by space.

I was late and almost missed the task, unfortunately, I didn't have time to solve it myself, and spent another 40 minutes trying to figure out how to apply dynamic programming here. 
Luckily, I came across a very talented solution that stands out from the rest
"""

# https://leetcode.com/problems/find-the-maximum-length-of-valid-subsequence-ii/solutions/6969437/beats-super-easy-beginners-java-c-c-pyth-oe8e/
class Solution:
    def maximumLength(self, nums: list[int], k: int) -> int:
        max_length = 2

        for target_mod in range(k):
            remainder_dp = [0] * k

            for num in nums:
                num_mod = num % k
                required_mod = (target_mod - num_mod + k) % k
                remainder_dp[num_mod] = remainder_dp[required_mod] + 1

            max_length = max(max_length, max(remainder_dp))

        return max_length


