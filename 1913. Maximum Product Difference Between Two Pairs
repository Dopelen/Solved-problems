#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
I first did it through sorting, just out of habit, and then I thought about it and replaced it with one pass. 
This should be faster because with constant checks the speed increases to O(n) from O(n(log(n)))

"""

# O(n(log(n)))
class Solution:
    def maxProductDifference(self, nums: List[int]) -> int:
        nums = sorted(nums, reverse=True)
        return nums[0] * nums[1] - nums[-1] * nums[-2]

# O(n)
class Solution:
    def maxProductDifference(self, nums: List[int]) -> int:
        max_1 = max_2 = 0
        min_1 = min_2 = math.inf
        for elem in nums:
            if elem > max_1:
                print(elem, max_1)
                max_2 = max_1
                max_1 = elem
            elif elem > max_2:
                max_2 = elem
            if elem < min_1:
                min_2 = min_1
                min_1 = elem
            elif elem < min_2:
                min_2 = elem
        return max_1 * max_2 - min_1 * min_2
