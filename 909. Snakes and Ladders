#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * m) complexity by time and O(n * m) by space.

I was in a hurry to do it, that's why it turned out so crooked, but nevertheless, the solution passed!
The concept is simple. A dictionary of all transitions, fortunately the side limitation is only 20, and then from each cell we climb the ladder or into all the values ​​of the dice.
"""

class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        side = len(board)
        total = side ** 2

        dest = {}
        num = 1
        even = True
        for r in range(side - 1, -1, -1):
            if even:
                for c in range(side):
                    dest[num] = board[r][c]
                    num += 1
            else:
                for c in range(side - 1, -1, -1):
                    dest[num] = board[r][c]
                    num += 1
            even = not even

        visited = set()
        queue = deque([(1, 0)])

        while queue:
            cur_num, steps = queue.popleft()

            if cur_num == total:
                return steps

            if cur_num in visited:
                continue
            visited.add(cur_num)

            for i in range(1, 7):
                next_num = cur_num + i
                if next_num > total:
                    continue

                if dest[next_num] != -1:
                    next_num = dest[next_num]

                if next_num not in visited:
                    queue.append((next_num, steps + 1))

        return -1
