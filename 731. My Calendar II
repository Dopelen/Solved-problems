#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 2) complexity by time and O(n) by space.

The second version does not use insertion into a sorted array, here we simply pass our boundaries into the function, first checking for intersections, and then checking how many intersections there were
"""

class MyCalendarTwo:
    def __init__(self):
        self.list = []

    def book(self, start: int, end: int) -> bool:
        for left, right in self.list:
            if start < right and end > left:
                new_start = max(left, start)
                new_end = min(right, end)
                if self.check(new_start, new_end):
                    return False
        self.list.append((start, end))
        return True

    def check(self, start, end):
        overlap_count = 0
        for a, b in self.list:
            if start < b and end > a:
                overlap_count += 1
                if overlap_count == 2:
                    return True        
        return False
