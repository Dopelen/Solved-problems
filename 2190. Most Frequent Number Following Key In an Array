#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

I spent more time reading the assignment than writing the code.
If we rephrase â€œFind the number most often preceded by the given number".
I just checked what number was in front of each element and returned the maximum that was supported in a separate variable.

"""

class Solution:
    def mostFrequent(self, nums: List[int], key: int) -> int:
        d = defaultdict(int)
        cur_m = ans = 0
        for i in range(1, len(nums)):
            if nums[i - 1] == key:
                d[nums[i]] += 1
                if d[nums[i]] > cur_m:
                    cur_m = d[nums[i]]
                    ans = nums[i]
        return ans


# Cool one
# https://leetcode.com/problems/most-frequent-number-following-key-in-an-array/solutions/3480488/python-2-lines-functional-style/
class Solution:
    def mostFrequent(self, nums: List[int], key: int) -> int:
        l = [t for k,t in zip(nums, nums[1:]) if k == key]
        return max(set(l), key = l.count)
