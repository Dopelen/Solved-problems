#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This code has O(n) complexity by time and O(1) by space.

The task seemed difficult to me, then quite simple, then it turned out to be the last tests and was difficult again.
If you find 2 points at which the sum is equal to 1/3 of the total sum, and you know that the sum of all elements can be divided into 3 parts, 
we know for sure that the last part will be equal in sum to the previous two.

"""

class Solution:
    def canThreePartsEqualSum(self, arr: List[int]) -> bool:
        full_s = sum(arr)
        if full_s % 3 != 0: return False
        full_s = full_s//3
        group = cur_sum = 0
        for el in arr[:-1]:
            cur_sum += el
            if cur_sum == full_s:
                if group == 1: 
                    return True
                cur_sum, group = 0, 1
        return False   
