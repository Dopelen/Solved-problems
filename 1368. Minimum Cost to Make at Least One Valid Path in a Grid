#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * m) complexity by time and O(n * m) by space.

I wouldn't say that this task is categorically difficult, traversing the matrix with its representation as a graph is a generally understandable idea. 
The difficult part is to reduce all the steps that need to be done (which, thank God, are few here) to a common code.
It is enough for us to:
1. make movements in all possible directions from each cell of the matrix, 
2. excluding options where we have already been (we will not go back, because the minimum cost of reaching the cell from which you came will always be less) 
3. prioritizing movements that do not cost anything, simultaneously filling the matrix of minimum costs.
"""

class Solution(object):
    def minCost(self, grid):
        rows, cols = len(grid), len(grid[0])
        min_cost = [[float('inf')] * cols for _ in range(rows)]
        min_cost[0][0] = 0
        dq = deque([(0, 0)])
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        while dq:
            y, x = dq.popleft()
            for i, (dy, dx) in enumerate(directions):
                ny, nx = y + dy, x + dx
                cost = 1 if grid[y][x] != i + 1 else 0
                if (0 <= ny < rows) and (0 <= nx < cols) and (min_cost[y][x] + cost < min_cost[ny][nx]):
                    min_cost[ny][nx] = min_cost[y][x] + cost
                    if cost == 1:
                        dq.append((ny, nx))
                    else:
                        dq.appendleft((ny, nx))
        return min_cost[rows - 1][cols - 1]
