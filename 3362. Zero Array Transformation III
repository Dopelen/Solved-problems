#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * log(n)) complexity by time and O(n) by space

I took the code from a similar task from the day before yesterday as a basis, but I'm not thinking clearly today, so I sat for an hour and made a lot of crap.
The task is reasonable and doable, but I couldn't handle it today
"""

# https://leetcode.com/problems/zero-array-transformation-iii/solutions/6737791/zero-array-transformation-iii/?envType=daily-question&envId=2025-05-22
class Solution:
    def maxRemoval(self, nums: List[int], queries: List[List[int]]) -> int:
        queries.sort(key=lambda x: x[0])
        heap = []
        deltaArray = [0] * (len(nums) + 1)
        operations = 0
        j = 0
        for i, num in enumerate(nums):
            operations += deltaArray[i]
            while j < len(queries) and queries[j][0] == i:
                heappush(heap, -queries[j][1])
                j += 1
            while operations < num and heap and -heap[0] >= i:
                operations += 1
                deltaArray[-heappop(heap) + 1] -= 1
            if operations < num:
                return -1
        return len(heap)
