#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n(log(n))) complexity by time and O(n) by space.

Merging looks optimal. But I didn't think about it initially.

"""

# O(n(log(n))) with sorting
class Solution:
    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        di_1 = defaultdict(int)
        di_2 = defaultdict(int)
        answer = []
        for elem in nums1:
            di_1[elem[0]] = elem[1]
        for elem_  in nums2:
            di_2[elem_[0]] = elem_[1]
        for k,v in di_2.items():
            di_1[k] += v
        for ans in di_1.items():
            answer.append([ans[0], ans[1]])
        return sorted(answer, key = lambda x: x[0])

# Same but smaller
class Solution:
    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        d = Counter(dict(nums1)) + Counter(dict(nums2))
        return [[k, v] for k, v in sorted(d.items())]

# O( n + m ) Merge 2 sorted arrays
class Solution:
    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        res = []
        i = 0
        j = 0
        while i < len(nums1) or j < len(nums2):
            if i == len(nums1):
                res.append(nums2[j])
                j += 1
            elif j == len(nums2):
                res.append(nums1[i])
                i += 1
            else:
                if nums1[i][0] == nums2[j][0]:
                    res.append([nums1[i][0], nums1[i][1] + nums2[j][1]])
                    i += 1
                    j += 1
                elif nums1[i][0] < nums2[j][0]:
                    res.append(nums1[i])
                    i += 1
                else:
                    res.append(nums2[j])
                    j += 1
        return res
