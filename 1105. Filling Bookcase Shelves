#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 2) complexity by time (bc of factorial) and O(n) by space.

For almost two hours I tried to solve this problem without dynamic programming and failed miserably.
After that I went to read about dynamic programming. 
The algorithms themselves are not very difficult, I even took a course on them, but as for how to apply them in this or that case, without the proper skill it becomes quite difficult.
"""

class Solution:
    def minHeightShelves(self, books: List[List[int]], shelfWidth: int) -> int:
        number_of_books = len(books)
        dinamic_pain = [math.inf] * (number_of_books + 1)
        dinamic_pain[0] = 0

        for i in range(1, number_of_books + 1):
            width = 0
            maxHeight = 0
            for j in range(i, 0, -1):
                width += books[j-1][0]
                if width > shelfWidth:
                    break
                maxHeight = max(maxHeight, books[j-1][1])
                dinamic_pain[i] = min(dinamic_pain[i], dinamic_pain[j-1] + maxHeight)

        return dinamic_pain[number_of_books]
