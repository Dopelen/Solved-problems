#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * m * log(n * m)) complexity by time and O(n) by space.

I solved a similar problem during Advent of Code last year, and because I was constantly trying to remember what was there, it was as if I had lost the ability to "think" about how to write it from scratch.
As a result, I racked my brain for a long time and still couldn't solve it.

# https://leetcode.com/problems/trapping-rain-water-ii/solutions/1138028/python3visualization-bfs-solution-with-e-rtyb/
"""

class Solution:
    def trapRainWater(self, heightMap: List[List[int]]) -> int:
        if not heightMap or not heightMap[0]:
            return 0
        rows, cols = len(heightMap), len(heightMap[0])
        if rows < 3 or cols < 3:
            return 0
        heap = []
        for i in range(rows):
            for j in range(cols):
                if i == 0 or i == rows - 1 or j == 0 or j == cols - 1:
                    heapq.heappush(heap, (heightMap[i][j], i, j))
                    heightMap[i][j] = -1
        level, res = 0, 0
        while heap:
            height, x, y = heapq.heappop(heap)
            level = max(height, level)
            for i, j in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]:
                if 0 <= i < rows and 0 <= j < cols and heightMap[i][j] != -1:
                    heapq.heappush(heap, (heightMap[i][j], i, j))
                    if heightMap[i][j] < level:
                        res += level - heightMap[i][j]
                    heightMap[i][j] = -1
        return res
