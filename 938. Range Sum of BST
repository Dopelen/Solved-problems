#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on letcode.
This program has O(n) complexity by time and O(height) by space

I simply traverse the tree and add the desired values to the variable. But then I realize...
Its binary tree, so I can rewrite it more optimal way!

"""

# For non-binary tree (O(n))
class Solution:
    def __init__(self):
        self.my_sum = 0

    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        if root:
            if root.val >= low and root.val <= high:
                self.my_sum += root.val
            Solution.rangeSumBST(self, root.left, low, high)
            Solution.rangeSumBST(self, root.right, low, high)               
        return self.my_sum

# For binary tree. Still O(n) but should be faster on average for many input data configurations because it cuts out unnecessary
class Solution:
    def __init__(self):
        self.my_sum = 0

    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        if root:
            if root.val < low: 
                Solution.rangeSumBST(self, root.right, low, high)             
            elif root.val > high:
                Solution.rangeSumBST(self, root.left, low, high)
            else:
                self.my_sum += root.val
                Solution.rangeSumBST(self, root.left, low, high)
                Solution.rangeSumBST(self, root.right, low, high)
        return self.my_sum
