#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time O(n).

I simply split both strings into pieces and normalized them to the same size, then compared the pieces as numbers
"""

# Refactored version
class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        v1 = list(map(int, version1.split('.')))
        v2 = list(map(int, version2.split('.')))
        
        max_len = max(len(v1), len(v2))
        v1.extend([0] * (max_len - len(v1)))
        v2.extend([0] * (max_len - len(v2)))
        
        for a, b in zip(v1, v2):
            if a < b:
                return -1
            elif a > b:
                return 1
        return 0


# Initial Solution
class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        split_1, split_2 = version1.split("."), version2.split(".")
        if len(split_1) != len(split_2):
            max_len = max(len(split_1), len(split_2))
            if len(split_1) < len(split_2):
                split_1.extend(["0"] * (max_len - len(split_1)))
            else:
                split_2.extend(["0"] * (max_len - len(split_2)))

        for chunk_1, chunk_2 in zip(split_1, split_2):
            chunk_1 = chunk_1.lstrip('0') or '0'
            chunk_2 = chunk_2.lstrip('0') or '0'
            if int(chunk_1) < int(chunk_2):
                return -1
            elif int(chunk_1) > int(chunk_2):
                return 1
        return 0
