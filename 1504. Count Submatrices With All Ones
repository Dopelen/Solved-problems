#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 3) complexity by time and O(n * m) by space.

It was possible to do a simple multiple round trip of all possible rectangles from any point, but it is somehow completely crude. 
The most difficult part is to think of a formula for taking into account rectangles by an additional matrix, after its construction, fortunately this point is indicated in the tips.
"""

class Solution:
    def numSubmat(self, mat: List[List[int]]) -> int:
        height, width = len(mat), len(mat[0])
        arr = [[0] * width for _ in range(height)]
        current_rect = total_rect = 0
        for i in range(height):
            for j in range(width):
                if j == 0:
                    arr[i][j] = mat[i][j]
                else:
                    arr[i][j] = 0 if mat[i][j] == 0 else arr[i][j - 1] + 1
                current_rect = arr[i][j]
                for k in range(i, -1, -1):
                    current_rect = min(current_rect, arr[k][j])
                    if current_rect == 0:
                        break
                    total_rect += current_rect

        return total_rect

