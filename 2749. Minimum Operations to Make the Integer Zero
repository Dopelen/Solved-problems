#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(1) complexity by time and O(1) by space.

I started writing a full search, but it did not solve the problem as intended and was very expensive. 
The logic of the solution turned out to be more interesting, unfortunately I did not think that as soon as the conversation turns to powers of two, it is always worth considering the transition to the bit plane.
I solved it with hints.
The main trick is to check the possibility of decomposing a number into powers of two when checking each k, where k is the possible number of operations.
"""

class Solution:
    def makeTheIntegerZero(self, num1: int, num2: int) -> int:
        for k in range(1, 61):
            target = num1 - k * num2
            if target < k:
                continue
            bits = bin(target).count('1')
            if bits <= k <= target:
                return k
        return -1
