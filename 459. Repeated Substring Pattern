#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This code has O(n**2) complexity by time and O(n) by space.

I don’t like the polynomial complexity of this solution, but I’m glad that I came to it myself and it’s understandable.

"""


class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        sub_s = ""
        chanks = 0
        size = len(s)
        for el in s[:size//2]:
            sub_s += el
            chanks += 1
            if sub_s * (size//chanks) == s:
                return True
        return False


# We can write it only with indexses
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        size = len(s)
        for i in range(1, size//2 + 1):
            sub_s = s[:i]
            if not size % 1:
                if sub_s * (size//i) == s:
                    return True
        return False


# Smart one
# https://leetcode.com/problems/repeated-substring-pattern/solutions/3938580/99-42-2-approaches-o-n/
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        return s in (s + s)[1:-1]
