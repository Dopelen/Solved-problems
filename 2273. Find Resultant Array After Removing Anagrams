#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 2) * (m*log(m))) complexity by time and O(m) by space, where n is number of words and m max_lenght of the word. (polinom - because every pop() is also n)

Seems like a simple task, but I struggled with it.
Failed on test 196 out of 200 and had to rewrite the entire code.
Pleasant news: I carefully re-read the Counter() documentation.

"""

class Solution:
    def removeAnagrams(self, words: List[str]) -> List[str]:
        i = 0
        while i != len(words)-1:
            if sorted(words[i]) == sorted(words[i+1]):
                words.pop(i+1)
                i-=1
            i+=1
        return words
