#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
So this program has O(n) complexity by time and O(n) by space.

It's nice that the problem has changed quite a bit, but the solution can be done fundamentally differently. 
I tried to make the solution using conventions in Pascal's triangles, rather than simple iteration.
qore formula is: next_element = previous element×(rowIndex−position+1) / position
However, I had to really rack my brain. It's sad to not be as smart as you think.

"""

class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        res = [1]
        prev = 1
        for k in range(1, rowIndex + 1):
            next_val = prev * (rowIndex - k + 1) // k
            res.append(next_val)
            prev = next_val
        return res
