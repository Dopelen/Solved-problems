#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode. 
This programm has O(n * log(n)) complexity by time and O(n) by space.

The task is not at all my level, if I knew and understood the solution algorithm, I would have written it for at least a day. 
I wrote the maximum factorization, can I get 1 point for this?
"""


# https://leetcode.com/problems/apply-operations-to-maximize-score/solutions/3901707/day-500-java-c-python-detailed-explanation-approach-algorithm/?envType=daily-question&envId=2025-03-29
class Solution:
    MOD = 10 ** 9 + 7
    def maximumScore(self, nums: List[int], k: int) -> int:
        size = len(nums)
        upper = max(nums) + 1
        prime = [True] * upper
        prime[0] = prime[1] = False
        primeScore = [0] * upper
        for i in range(2, upper):
            if prime[i]:
                for j in range(i, upper, i):
                    primeScore[j] += 1
                    prime[j] = False

        nextGreaterElement = [size] * size
        s = []
        for i in range(size - 1, -1, -1):
            while s and primeScore[nums[i]] >= primeScore[nums[s[-1]]]:
                s.pop()
            nextGreaterElement[i] = s[-1] if s else size
            s.append(i)

        prevGreaterOrEqualElement = [-1] * size
        s = []
        for i in range(size):
            while s and primeScore[nums[i]] > primeScore[nums[s[-1]]]:
                s.pop()
            prevGreaterOrEqualElement[i] = s[-1] if s else -1
            s.append(i)

        res = 1
        tuples = [[nums[i], i] for i in range(size)]
        tuples.sort(reverse=True)
        for num, idx in tuples:
            operations = min((idx - prevGreaterOrEqualElement[idx]) * (nextGreaterElement[idx] - idx), k)
            res = (res * self.pow(num, operations)) % self.MOD
            k -= operations
            if k == 0:
                return res

        return res

    def pow(self, x: int, n: int) -> int:
        res = 1
        while n > 0:
            if n % 2 == 1:
                res = (res * x) % self.MOD
            x = (x * x) % self.MOD
            n //= 2
        return res


# Cool solution using the Sieve of Eratosthenes
# from fastest Code Sample

MOD = 10 ** 9 + 7
MX = 10 ** 5 + 1
omega = [0] * MX
for i in range(2, MX): 
    if omega[i] == 0: 
        for j in range(i, MX, i): 
            omega[j] += 1

class Solution:
    def maximumScore(self, nums: List[int], k: int) -> int:
        n = len(nums)
        left = [-1] * n
        right = [n] * n
        st = []
        for i, v in enumerate(nums): 
            while st and omega[nums[st[-1]]] < omega[v]: 
                right[st.pop()] = i
            if st: 
                left[i] = st[-1]
            st.append(i)

        ans = 1
        for i, v, l, r in sorted(zip(range(n), nums, left, right), key=lambda x: -x[1]): 
            tot = (i - l) * (r - i)
            if tot >= k: 
                ans = ans * pow(v, k, MOD) % MOD
                break
            ans = ans * pow(v, tot, MOD) % MOD
            k -= tot
        
        return ans

