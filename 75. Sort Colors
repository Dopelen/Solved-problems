#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n(log(n))) complexity by time and O(1) by space.

The difficulty of the task lies in on-site sorting. 
If you do not use the built-in functions, you will have to manipulate three pointers, rearranging them at each step. 
Because of the risk of me going crazy while I deal with this, I just used in-place sorting.

"""

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        nums.sort()



# True Solution
# https://leetcode.com/problems/sort-colors/solutions/3164333/solution/

class Solution:
    def sortColors(self, nums: List[int]) -> None:

        red, white, blue = 0, 0, len(nums) - 1

        while white <= blue:
            if nums[white] == 0:
                nums[white], nums[red] = nums[red], nums[white]
                red += 1
                white += 1
            elif nums[white] == 1:
                white += 1
            else:
                nums[white], nums[blue] = nums[blue], nums[white]
                blue -= 1
