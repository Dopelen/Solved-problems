"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

With such a large K it is impossible to fit into the given constraints, so the task is to calculate the pattern by which the string is transformed, and through this find the desired element, and not through emulation.
Too difficult for me.
But the problem has a very beautiful solution, reconstructing shifts from the end.
"""

# https://leetcode.com/problems/find-the-k-th-character-in-string-game-ii/solutions/6916406/beginner-freindly-java-c-python-js
class Solution:
    def kthCharacter(self, k: int, operations: List[int]) -> str:
        n, i = 1, 0
        while n < k:
            n *= 2
            i += 1
        d = 0
        while n > 1:
            if k > n // 2:
                k -= n // 2
                d += operations[i - 1]
            n //= 2
            i -= 1
        return chr(d % 26 + ord("a"))
