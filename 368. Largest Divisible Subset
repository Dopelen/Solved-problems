"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 2) complexity by time and O(n) by space.

Lately I don't feel very smart, maybe the problems have become more difficult or I've become dumber, in any case, with or without hints, I'm struggling with the solution.
Here we don't need to look for a subsequence, but just a set of elements, so we can safely sort.
Using dynamic programming, we find the length of the maximum sequence possible for a given index.
To restore the solution, we go from the place with the largest sequence through all elements, adding those that are divisible.
"""

# https://leetcode.com/problems/largest-divisible-subset/solutions/4699685/beats-99-users-c-java-python-javascript-explained/?envType=daily-question&envId=2025-04-06
class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        size = len(nums)
        nums.sort()
        max_size, max_index = 1, 0
        dp = [1] * size

        for i in range(1, size):
            for j in range(i):
                if nums[i] % nums[j] == 0:
                    dp[i] = max(dp[i], dp[j] + 1)
                    if dp[i] > max_size:
                        max_size = dp[i]
                        max_index = i

        result = []
        num = nums[max_index]
        for i in range(max_index, -1, -1):
            if num % nums[i] == 0 and dp[i] == max_size:
                result.append(nums[i])
                num = nums[i]
                max_size -= 1

        return result
