#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

Yesterday I was in a hurry and didn't have time to do the task properly, I just threw some solution and went to bed.
Today I responsibly looked at what was there.
This solution belongs:
https://leetcode.com/problems/walking-robot-simulation/solutions/5734055/simple-and-easy-solution-using-java-and-python-with-explanation/
and I certainly couldn't write it better.
Beautiful implementation of changing direction and maintaining current coordinates.
"""

class Solution:
    def robotSim(self,commands,obstacles):
        x,y,d=0,0,0
        direction=[(0,1),(1,0),(0,-1),(-1,0)]
        max_distance=0
        obstacles=set(map(tuple,obstacles))
        for cmd in commands:
            if cmd==-1:
                d=(d+1)%4
            elif cmd==-2:
                d=(d-1)%4
            else:
                for _ in range(cmd):
                    nx,ny=x+direction[d][0],y+direction[d][1]
                    if (nx,ny) in obstacles:
                        break
                    x,y=nx,ny
                    max_distance=max(max_distance,x*x+y*y)
        return max_distance
