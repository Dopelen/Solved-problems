#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * m) complexity by time and O(n * m) by space.

There may be an easier way, but I just converted all the moves into a matrix and checked the victory conditions.

"""

class Solution:
    def tictactoe(self, moves: List[List[int]]) -> str:
        mat = [[None] * 3 for _ in range(3)]
        players = {True: "A", False :"B"}
        symbol = True
        turn = 0
        
        for el in moves:
            turn += 1
            mat[el[0]][el[1]] = symbol
            symbol = not symbol
        
        for s in mat:
            if None not in s:
                if sum(s) == 3 or sum(s) == 0:
                    return players[s[0]]
        
        for i in range(3):
            if mat[0][i] is not None and mat[0][i] == mat[1][i] == mat[2][i]:
                return players[mat[0][i]]

        if mat[1][1] is not None and ((mat[0][0] == mat[1][1] == mat[2][2]) or (mat[0][2] == mat[1][1] == mat[2][0])):
            return players[mat[1][1]]
        
        else:
            if turn == 9: return "Draw"
            else: return "Pending"
