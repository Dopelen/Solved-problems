#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has... idk complexity by time (we use the sqrt number of operations for each number in the two diagonals). 
In short, our calculations are tied to the size of the diagonal and the size of the number... Like O(sqrt(max_value) * sqrt(n))
...and O(sqrt(n)) of space. where n is the number of elements in the matrix.

A massive task, not only do you need to bypass the diagonals, but you also need to write a function to check a prime number.
"""

class Solution:
    def diagonalPrime(self, nums: List[List[int]]) -> int:

        def is_prime(n):
            if n < 2: return False
            i = 2
            while i * i <= n:
                if n % i == 0:
                    return False
                i += 1
            return True

        j = size = len(nums) - 1
        i = 0
        dig = set()
        while i <= size:
            if is_prime(nums[i][i]):
                dig.add(nums[i][i])
            if is_prime(nums[i][j]):
                dig.add(nums[i][j])
            j -= 1
            i += 1
        return max(dig) if dig != set() else 0
