#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(?) complexity by time and O(?) by space. Bc I have 0 iea how datatime works inside.

As soon as the task touches time, some kind of cruelty immediately begins. Fortunately, Datatime has a library and formatting by days of the week.

"""

# Mine Solution
class Solution:
    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:
        d = date(year, month, day)
        week = {str(i):el for i, el in zip(range(7), ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"])}
        weekday_number = d.strftime("%w")
        return week[weekday_number]


# Solution from person who really know how datatime works
# https://leetcode.com/problems/day-of-the-week/solutions/1550770/python-simple-one-line-solution/
class Solution:
  def dayOfTheWeek(self, day: int, month: int, year: int) -> str:
  	return date(year, month, day).strftime("%A")

# With calculating
# https://leetcode.com/problems/day-of-the-week/solutions/774349/simple-easy-solution-by-python-3/
class Solution:
    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:
        prev_year = year - 1
        days = prev_year * 365 + prev_year // 4 - prev_year // 100 + prev_year // 400
        days += sum([31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][:month - 1])
        days += day

        if month > 2 and ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0):
            days += 1

        return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][days % 7]
