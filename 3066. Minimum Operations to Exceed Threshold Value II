#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n(log(n))) complexity by time and O(n) by space.

If we are talking about maintaining an array of minimums, a heap immediately comes to mind!
To solve this, it is enough to simply rewrite the condition in the format of interaction with the heap.
So here. As soon as the first minimum exceeds the value K, we can safely exit the cycle, and if not, we enter a new value.
"""

class Solution:
    def minOperations(self, nums: List[int], k: int) -> int:
        answer = 0
        heapify(nums)
        while nums:
            x = heappop(nums)
            if x >= k:
                break
            x *= 2

            if not nums:
                return answer + 1

            y = heappop(nums)
            if y >= k:
                return answer + 1

            new_v = x + y

            if new_v < k:
                heappush(nums, new_v)
            answer += 1

        return answer
