#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

Litcode keeps throwing challenges at me to undermine my self-confidence and it works.
I fiddled around for a couple of hours and still couldn't solve it on my own.
My implementation was to remove an edge in a tree, but I couldn't get it right.
The correct solution is to remove the pair that unlocks the maximum number of new combinations.
But how to implement this is a task of some cosmic level, especially the part with optimization of finding the nearest conflict.
"""

# https://leetcode.com/problems/maximize-subarrays-after-removing-one-conflicting-pair/editorial/?envType=daily-question&envId=2025-07-26
class Solution:
    def maxSubarrays(self, n: int, conflictingPairs: List[List[int]]) -> int:
        bMin1 = [2**31 - 1] * (n + 1)
        bMin2 = [2**31 - 1] * (n + 1)
        for pair in conflictingPairs:
            a = min(pair[0], pair[1])
            b = max(pair[0], pair[1])
            if bMin1[a] > b:
                bMin2[a] = bMin1[a]
                bMin1[a] = b
            elif bMin2[a] > b:
                bMin2[a] = b
        res = 0
        ib1 = n
        b2 = 0x3FFFFFFF
        delCount = [0] * (n + 1)
        for i in range(n, 0, -1):
            if bMin1[ib1] > bMin1[i]:
                b2 = min(b2, bMin1[ib1])
                ib1 = i
            else:
                b2 = min(b2, bMin1[i])
            res += min(bMin1[ib1], n + 1) - i
            delCount[ib1] += min(min(b2, bMin2[ib1]), n + 1) - min(
                bMin1[ib1], n + 1
            )
        return res + max(delCount)


