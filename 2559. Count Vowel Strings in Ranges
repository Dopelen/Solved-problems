#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n(log(n)))  complexity by time and O(n) by space.

I was pleasantly surprised that my solution passed, I'm sure it can be written faster, probably using prefix and suffix arrays.
Here I initially filter the list, leaving only the indexes of the words that match the condition (having a vowel at the beginning and end).
Then using binary search I find the start and end point for each range.
"""

# Initial solution
class Solution:
    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:
        vows = {'a', 'e', 'i', 'o', 'u'}
        answer = []
        filtered = []
        for i, e in enumerate(words):
            if e[0] in vows and e[-1] in vows:
                filtered.append(i)

        for start, end in queries:
            s_pos = bisect.bisect_left(filtered, start)
            e_pos = bisect.bisect_right(filtered, end)
            answer.append(e_pos - s_pos)

        return answer

# Prefix version
class Solution:
    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:
        vows = {'a', 'e', 'i', 'o', 'u'}
        answer = []
        filtered = set()
        for i, e in enumerate(words):
            if e[0] in vows and e[-1] in vows:
                filtered.add(i)

        if not filtered:
            return [0] * len(queries)

        prefix_s = [0]
        for j in range(1, max(filtered) + 2):
            prefix_s.append(prefix_s[-1] if (j - 1) not in filtered else (prefix_s[-1] + 1))

        total_pref = len(prefix_s)

        for start, end in queries:
            if start >= total_pref:
                answer.append(0)
                continue
            start_v = prefix_s[start]
            end_v = prefix_s[-1] if end >= total_pref else prefix_s[min(end + 1, total_pref - 1)]
            answer.append(end_v - start_v)

        return answer

# Human prefix version
# https://leetcode.com/problems/count-vowel-strings-in-ranges/solutions/3153203/python-3-4-lines-w-explanation-and-examp-6gup/
class Solution:
    def vowelStrings(self, words: List[str], 
                           queries: List[List[int]]) -> List[int]:                                       
        vowels = lambda w: w[0] in 'aeiou' and w[-1] in 'aeiou'
        words = map(vowels, words)
        pref = list(accumulate(words, initial = 0))
        return [pref[r+1] - pref[l] for l,r in queries] 
