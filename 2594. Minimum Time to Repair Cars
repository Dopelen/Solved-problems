#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * log(n)) complexity by time and O(n) by space

Binary Search Week.
Here we use the search to estimate the time it takes to complete the work, and shift the boundaries based on our calculations to find the minimum.
If we were able to complete the task in the given time, we can assume that we can solve it in less time and shift right pointer to mid.
I spent most of my time writing the check function.
Initially I assumed not the time, but the number of cars that the first master can do, with the subsequent calculation of the possibility of completing the work.
But I got very confused and eventually changed the function.
"""

class Solution:
    def repairCars(self, ranks: List[int], cars: int) -> int:
        ranks.sort()
        left, right = 0, ranks[0] * cars ** 2

        def possible_to_repair(time):
            repaired = 0
            for rank in ranks:
                cars_for_master = math.floor(math.sqrt(time / rank))
                repaired += cars_for_master
                if repaired >= cars:
                    return True
            return False

        while left < right:
            mid = (left + right) // 2
            if possible_to_repair(mid):
                right = mid
            else:
                left = mid + 1

        return left
