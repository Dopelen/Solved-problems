#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time.

Essentially, we need to find ways to achieve the sum by adding 1 or 2 to the existing numbers. 
Not counting the first steps, each of our sums is equal to the sum of the ways to reach the previous 2 nodes. 
Representing the problem as a tree, it becomes obvious how this happens, because before reaching our number, each new node generates 2 new ones.
I couldn't calculate the formula, so I solved it by brute force, saving all intermediate results. Oh...I mean, using dynamic programming! :)

"""

# O(n) space
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        ways = [0] * (n + 1)
        ways[1], ways[2]  = 1, 2
        for i in range(3, n + 1):
            ways[i] = ways[i - 1] + ways[i - 2]
        return ways[n]


# My creative realization! (Really just a "memory optimization" dp technique). Virsion with O(1) space:
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 3:
            return n
        first, second, third = 1, 2, 3
        for i in range(3, n):
            first = second
            second = third
            third = first + second
        return third
