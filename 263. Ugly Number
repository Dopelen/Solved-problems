#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This code has O(n) complexity by time and O(1) by space.

This particular task is a child of terrible formulation. 
Without being a mathematician, it is impossible to understand what they want from you the first time.
In general, the task is not difficult if you know how to factor into prime factors and know the features of this process.
But for the first time in my life I read about Prime Factorization and the Prime Factorization tree.

"""

class Solution:
    def isUgly(self, num: int) -> bool:
        if num == 0: return False
        while num % 5 == 0: num /= 5
        while num % 3 == 0: num /= 3
        while num % 2 == 0: num /= 2
        return num == 1


# Cool Solution too!
# https://leetcode.com/problems/ugly-number/solutions/1764482/python3-faster-solution-basic-logic-with-maths/
class Solution:
    def isUgly(self, n: int) -> bool:
        if n<=0: 
            return False
        for i in [2,3,5]:
            while n%i==0:
                n=n//i
        return n==1
