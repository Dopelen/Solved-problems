#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(1) by space.

A very difficult task for me even taking into account the use of hints. To be honest, the hints confused me even more.
In the end, I solved it without any binary search that was offered there.
I wrote the counting function itself, but the trick with subtracting one from another - I spied.
"""

# (1600ms)
class Solution:
    def countOfSubstrings(self, word: str, k: int) -> int:

        def countAtLeastMConsonants(m):
            size = len(word)
            vowels = {'a', 'e', 'i', 'o', 'u'}
            vowels_map = defaultdict(int)
            consonants_counter = 0
            answer = left = right = 0
            while right < size or left < size:
                if len(vowels_map) == 5 and consonants_counter >= m:
                    answer += size - right + 1
                    if word[left] not in vowels:
                        consonants_counter -= 1
                    else:
                        vowels_map[word[left]] -= 1
                        if vowels_map[word[left]] == 0:
                            del vowels_map[word[left]]
                    left += 1
                else:
                    if right == size:
                        break
                    if word[right] not in vowels:
                        consonants_counter += 1
                    else:
                        vowels_map[word[right]] += 1
                    right += 1
            return answer

        return countAtLeastMConsonants(k) - countAtLeastMConsonants(k + 1)


# Fastest version (800ms)

class Solution:
    def countOfSubstrings(self, word: str, k: int) -> int:
        res = 0
        vowels = set('aeiou')
        n = len(word)
        freq = defaultdict(int)
        lo, hi, cnt = 0, 0, 0
        for c in word:
            if c in vowels:
                freq[c] += 1
            else:
                cnt += 1
            while cnt > k:
                if word[hi] in vowels:
                    freq[word[hi]] -= 1
                    if freq[word[hi]] == 0:
                        del freq[word[hi]]
                else:
                    cnt -= 1
                hi += 1
                lo = hi
            while cnt == k and hi < n:
                if word[hi] in vowels and freq[word[hi]] > 1:
                    freq[word[hi]] -= 1
                    if freq[word[hi]] == 0:
                        del freq[word[hi]]
                    hi += 1
                else:
                    break
            if cnt == k and len(freq) == 5:
                res += hi - lo + 1
        return res
