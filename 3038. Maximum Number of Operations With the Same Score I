#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(1) by space.

Something I didnâ€™t immediately understand is that we care about the number of equal sums before the first not equal.

"""

class Solution:
    def maxOperations(self, nums: List[int]) -> int:
        size = len(nums)
        prev_sum = nums[0] + nums[1]
        ans = 1
        for i in range(2, size-1 if size % 2 else size, 2):
            if nums[i] + nums[i+1] == prev_sum:
                ans += 1
            else:
                return ans
        return ans
