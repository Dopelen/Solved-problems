#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.

Perhaps not the fastest due to sorting, but an understandable solution.

We can replace sorting by passing through a dictionary containing all the elements. 
This will increase the amount of memory used, but will reduce the asymptotic time.
"""

# This program has O(n(log(n))) complexity by time and O(n) by space.
class Solution:
    def isGood(self, nums: List[int]) -> bool:
        nums.sort()
        n = nums[-1]
        return nums == ([el for el in range(1, n + 1)] + [n])


# This program has O(n) complexity by time and O(n) by space.
# Asymptotically optimized version!
class Solution:
    def isGood(self, nums: List[int]) -> bool:
        n = max(nums)
        l = [0] * (n + 1)
        for el in nums:
            if (l[el] != 0 and el != n) or (el == n and l[el] == 2):
                return False
            else:
                l[el] += 1
        return (sum(l) == n + 1) and (l[-1] == 2)
