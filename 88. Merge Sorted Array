#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

After several solution options that I went through, I came to the conclusion that it would be easiest to fill out list 1 from the end. 
If the elements in the second list end, then all those that are smaller remain in the first one, and if we got to the border of the first one earlier, then we need to replace the slice of the beginning of the first list with the second one.

"""

# First Solution O(n) by space
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        p1, p2 = m - 1, n - 1
        buf = n + m - 1
        while buf >= 0 and p2 >= 0:
            if nums2[p2] >= nums1[p1]:
                nums1[buf] = nums2[p2]
                p2 -= 1
            elif nums1[p1] > nums2[p2]:
                nums1[buf] = nums1[p1]
                p1 -= 1
            buf -= 1
            if p1 <= -1:
                nums1[:p2 + 1] = nums2[:p2 + 1]
                break


# After refactoring O(1) by space
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        p1, p2 = m - 1, n - 1
        buf = n + m - 1
        while p2 >= 0:
            if p1 >= 0 and nums1[p1] > nums2[p2]:
                nums1[buf] = nums1[p1]
                p1 -= 1
            else:
                nums1[buf] = nums2[p2]
                p2 -= 1
            buf -= 1
