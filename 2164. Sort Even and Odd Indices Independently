#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n(log(n))) complexity by time and O(n) by space.

I form a list of even and odd elements, and then I sort them, then combine them into one list back.

"""

# My way
class Solution:
    def sortEvenOdd(self, nums: List[int]) -> List[int]:
        size = len(nums)
        asc, dsc, ans = [], [], []
        flag = True
        for elem in nums:
            if flag: asc.append(elem)
            else: dsc.append(elem)
            flag = not flag
        asc.sort()
        dsc.sort(reverse=True)
        for el1, el2 in zip(asc, dsc):
            ans.append(el1)
            ans.append(el2)
        if size%2: ans = ans + [asc[-1]]
        return ans

# Short and smart way
# https://leetcode.com/problems/sort-even-and-odd-indices-independently/solutions/4160441/you-can-specify-steps-when-slicing-a-list/
class Solution:
    def sortEvenOdd(self, nums: List[int]) -> List[int]:
       nums[0::2]=sorted(nums[0::2])
       nums[1::2]=sorted(nums[1::2],reverse=True)
       return nums
