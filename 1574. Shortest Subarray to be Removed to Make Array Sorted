#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
 This program has O(n) complexity by time and O(n) by space.

Somehow I got stuck at the beginning and stuck at the end. The middle was fine.
The first snag is that we need to realize that we can only remove 1 piece and the maximum possible in this case will be the concat of very beginning of the list and the very end.
The second difficulty is writing a pointer movement loop that would guarantee us the smallest possible cut piece.
"""

class Solution:
    def findLengthOfShortestSubarray(self, arr: List[int]) -> int:
        size = len(arr)
        forward = 0
        while forward + 1 < size and arr[forward] <= arr[forward + 1]:
            forward += 1
        if forward == size - 1:
            return 0

        backward = size - 1
        while backward > 0 and arr[backward - 1] <= arr[backward]:
            backward -= 1

        compare = min(size - forward - 1, backward)
        pointer_1, pointer_2 = 0, backward
        while pointer_1 <= forward and pointer_2 < size:
            if arr[pointer_1] <= arr[pointer_2]:
                compare = min(compare, pointer_2 - pointer_1 - 1)
                pointer_1 += 1
            else:
                pointer_2 += 1
        return compare
