#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 2) complexity by time and O(n) by space.

I think there are ways to avoid recalculations, but I decided to do it head-on.
Initially, I missed some edge cases, fortunately I caught them during tests.
I just go through the matrix and calculate for each cell all possible squares from the current point.

note: there is also O(n) Solution with DP!
"""

# O(n ** 2)
class Solution:
    def countSquares(self, matrix: List[List[int]]) -> int:
        answer = 0
        width, height = len(matrix[0]), len(matrix)
        for row in range(height):
            for column in range(width):
                square_side = 0
                while all([row + square_side < height, column + square_side < width]):
                    if ([matrix[i][column] for i in range(row, row + square_side + 1)] ==
                            matrix[row][column:column + square_side + 1] ==
                            matrix[row + square_side][column: column + square_side + 1] ==
                            [matrix[j][column + square_side] for j in range(row, row + square_side + 1)] ==
                            [1 for _ in range(0, square_side + 1)]):
                        answer += 1
                        square_side += 1
                    else:
                        break
        return answer

# O(n)
class Solution:
    def countSquares(self, matrix: List[List[int]]) -> int:
        if not matrix or not matrix[0]:
            return 0
        height, width = len(matrix), len(matrix[0])
        dp = [[0] * width for _ in range(height)]
        answer = 0
        for row in range(height):
            for col in range(width):
                if matrix[row][col] == 1:
                    if row == 0 or col == 0:
                        dp[row][col] = 1
                    else:
                        dp[row][col] = min(dp[row - 1][col], dp[row][col - 1], dp[row - 1][col - 1]) + 1
                    answer += dp[row][col]
        return answer

