#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 2) complexity by time and O(1) by space.

The usual solution for a O(n ** 2).

"""

class Solution:
    def countPrefixSuffixPairs(self, words: List[str]) -> int:
        size = len(words)
        answer = 0
        for i in range(size):
            check = words[i]
            for j in range(i+1, size):
                if words[j].startswith(check) and words[j].endswith(check):
                    answer += 1
        return answer


# There also itertools method!
# https://leetcode.com/problems/count-prefix-and-suffix-pairs-i/solutions/4745094/python-3-3-lines-string-methods-t-s-51-ms-16-6-mb/

class Solution:
    def countPrefixSuffixPairs(self, words: List[str], ans = 0) -> int:
        for pre_suf, word in combinations(words,2):
            ans+= word.startswith(pre_suf) and word.endswith(pre_suf)
        return  ans
