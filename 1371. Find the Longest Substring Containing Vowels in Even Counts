#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n).

Unfortunately, it's a difficult problem that I couldn't solve myself.
My original solution was an attempt to make a sliding window that would calculate the longest length, but I couldn't succeed with that.

The correct solution is to convert each vowel into a bit mask, if we only had the vowels "a, e, i", we could convert it to "000", where each bit indicates whether the letter occurred an even (0) or odd (1) number of times.
If "i" occurs an odd number of times at a given index and the first bit is responsible for this letter, our mask will look like 001, if even, 000.

By adding a mask for each index to the dictionary, we get a tool with which, when the mask changes, we can check whether this mask has occurred before (and if so, add the difference in indices to the answer)

For me, this is a difficult and not at all intuitive solution, even with a detailed analysis of the solution code.
This is the first time I've encountered this method, I'll have to encounter it 50 more times, and maybe then I'll be able to master it.

"""

# https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/
class Solution:
    def findTheLongestSubstring(self, s: str) -> int:
        # Vowels with their respective bitmask values
        vowels = {'a': 1, 'e': 2, 'i': 4, 'o': 8, 'u': 16}
        # Dictionary to store the first occurrence of each bitmask
        # We start with bitmask 0 at index -1, to handle the case when the entire string is valid
        first_occurrence = {0: -1}
        # Current bitmask and result variable
        mask = 0
        max_len = 0
        # Traverse the string
        for i, c in enumerate(s):
            # If the character is a vowel, update the bitmask
            if c in vowels:
                mask ^= vowels[c]
            # If the bitmask has been seen before, calculate the length of the substring
            if mask in first_occurrence:
                max_len = max(max_len, i - first_occurrence[mask])
            else:
                # If this is the first time we've seen this bitmask, store the index
                first_occurrence[mask] = i
        return max_len
