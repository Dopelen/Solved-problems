#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 2) complexity by time and O(n) by space.

The problem itself is not of medium complexity and can be solved by brute force with quadratic complexity.
"""

class Solution:
    def executeInstructions(self, n: int, startPos: List[int], s: str) -> List[int]:
        ans = [0] * len(s)
        steps = {"L":-1,"U":-1,"D":1,"R":1}
        for i, elem in enumerate(s):
            pos_y, pos_x = startPos[0], startPos[1]
            moves = 0
            for check in s[i:]:
                if check in "LR":
                    pos_x += steps[check]
                else:
                    pos_y += steps[check]
                moves += 1
                if (pos_y < 0) or (pos_x < 0) or (pos_y == n) or (pos_x == n):
                    moves -= 1
                    break   
            ans[i] = moves
        return ans
