#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

I remembered the solutions through the stack, it turned out a little untidy, but overall Iâ€™m happy that I remembered.

"""

class Solution:
    def executeInstructions(self, n: int, startPos: List[int], s: str) -> List[int]:
        ans = [0] * len(s)
        steps = {"L":-1,"U":-1,"D":1,"R":1}
        for i, elem in enumerate(s):
            pos = startPos
            moves = 0
            for check in s[i:]:
                print(s[i:], pos)
                if check in "LR":
                    pos[1] += steps[check]
                else:
                    pos[0] += steps[check]
                moves += 1
                print(check, pos)
                if (pos[0] < 0) or (pos[1] < 0) or (pos[0] == n) or (pos[1] == n):
                    print("break at", pos)
                    moves -= 1
                    break     
            ans[i] = moves
        return ans
