#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(m + n) complexity by time and O(1) by space.

Even though it's a matrix, I like the solution, it has linear complexity, and the interval-cutting heuristics make it even faster!

"""

class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        height = len(grid) - 1
        width = len(grid[0]) - 1
        eadge = -1
        answer = 0
        for row in range(height, -1, -1):
            if eadge == width:
                break
            for elem in range(width, eadge, -1):
                if grid[row][elem] < 0:
                    answer += 1
                else:
                    eadge = elem
                    break
        return answer
