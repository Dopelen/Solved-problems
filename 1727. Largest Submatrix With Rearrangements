#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * m * log(n)) complexity by time and O(n * m) by space.

This week the tasks are a bit heavier than usual, probably because I'm sick again.
The main trick is understanding why sorting works. Everything else is manageable.
"""

class Solution:
    def largestSubmatrix(self, matrix: List[List[int]]) -> int:
        rows, cols = len(matrix), len(matrix[0])

        for row in range(1, rows):
            for col in range(cols):
                if matrix[row][col]:
                    matrix[row][col] += matrix[row - 1][col]

        max_area = 0

        for i in range(rows):
            matrix[i].sort()
            for j in range(cols):
                height = matrix[i][j]
                width = cols - j
                max_area = max(max_area, height * width)

        return max_area
