#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
So this program has O(9 ** 81) complexity by time and O(1) by space.

I took yesterday's solution as a basis, but I didn't manage to solve everything in the allotted time, I had to go through the hints.
Overall, the task is clear and you can cope with it in a few hours, for me it was difficult to write the logic of backtracking and maintaining the numbers used.
"""

# https://leetcode.com/problems/sudoku-solver/
class Solution:
    def solveSudoku(self, board: list[list[str]]) -> None:
        box_size, side = 3, 9
        rows = [[0] * (side + 1) for _ in range(side)]
        cols = [[0] * (side + 1) for _ in range(side)]
        boxes = [[0] * (side + 1) for _ in range(side)]
        sudokuSolved = False

        def couldPlace(d, row, col):
            idx = (row // box_size) * box_size + col // box_size
            return rows[row][d] + cols[col][d] + boxes[idx][d] == 0

        def placeNumber(d, row, col):
            idx = (row // box_size) * box_size + col // box_size
            rows[row][d] += 1
            cols[col][d] += 1
            boxes[idx][d] += 1
            board[row][col] = str(d)

        def removeNumber(d, row, col):
            idx = (row // box_size) * box_size + col // box_size
            rows[row][d] -= 1
            cols[col][d] -= 1
            boxes[idx][d] -= 1
            board[row][col] = '.'

        def placeNextNumbers(row, col):
            nonlocal sudokuSolved
            if row == side - 1 and col == side - 1:
                sudokuSolved = True
            elif col == side - 1:
                backtrack(row + 1, 0)
            else:
                backtrack(row, col + 1)

        def backtrack(row, col):
            nonlocal sudokuSolved
            if board[row][col] == '.':
                for d in range(1, 10):
                    if couldPlace(d, row, col):
                        placeNumber(d, row, col)
                        placeNextNumbers(row, col)
                        if not sudokuSolved:
                            removeNumber(d, row, col)
            else:
                placeNextNumbers(row, col)

        for i in range(side):
            for j in range(side):
                if board[i][j] != '.':
                    placeNumber(int(board[i][j]), i, j)
        backtrack(0, 0)
