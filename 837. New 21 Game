#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

I always thought I was pretty good at probability, but every time I stumbled upon a probability programming problem, my brain deteriorates. 
After reading the comments, I understood the concept of the solution, but I still couldn't write a DP for this problem, and that's the most important thing.
By using a sliding window we optimize the calculations and the solution takes linear time.
"""

class Solution:
    def new21Game(self, n: int, k: int, maxPts: int) -> float:
        if k == 0 or k * maxPts <= n:
            return 1.0
        dp = [0.0] * (n + 1)
        dp[0] = window_sum = 1.0
        probability = 0.0

        for i in range(1, n + 1):
            dp[i] = window_sum / maxPts
            if i < k:
                window_sum += dp[i]
            else:
                probability += dp[i]
            if i >= maxPts:
                window_sum -= dp[i - maxPts]
        return probability 
