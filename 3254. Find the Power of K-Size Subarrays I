#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

I don't like these kinds of problems, they are quite simple and can be solved by brute force, but on the other hand, there are so many ways to make them faster that I just get lost.
"""

# After thinking and refactoring:
class Solution:
    def resultsArray(self, nums: List[int], k: int) -> List[int]:
        size = len(nums)
        answer = [1]
        if size >= k:
            for i in range(1, size):
                answer.append(answer[i - 1] + 1 if nums[i - 1] + 1 == nums[i] else 1)
        return [-1 if elem < k else nums[index] for index, elem in enumerate(answer)][k - 1:size]



# First idea (but slow):
class Solution:
    def resultsArray(self, nums: List[int], k: int) -> List[int]:
        size = len(nums)
        answer = [-1] * (size - k + 1)
        for i in range(size - k + 1):
            if i != 0 and answer[i - 1] != -1 and answer[i - 1] + 1 == answer[i]:
                answer[i] = answer[i - 1] + 1
            else:
                if nums[i:i + k] == [nums[i] + j for j in range(k)]:
                    answer[i] = nums[i + k - 1]
        return answer if k != 1 else nums
