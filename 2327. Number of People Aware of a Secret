#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This code has O(n) complexity by time and same be space.

I think I solved a similar problem in Yandex, it was painful to think about, but I quickly came up with a solution plan. 
True, at first I thought that the delay only applied to the first participant, and not to everyone, so I had to correct the solution. 
And I got really stuck with this.
I didn't really like the dynamic programming solution from the hints, so I continued thinking and managed to get it within the O(n).
"""

class Solution:
    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:
        modulo = 10 ** 9 + 7
        currently_know = [0] * n
        currently_know[0] = 1
        currently_share = 0
        total = 1
        for day in range(1, n):
            if day >= delay:
                currently_share += currently_know[day - delay]
            if day >= forget:
                forgot = currently_know[day - forget]
                total -= forgot
                currently_share -= forgot
            currently_know[day] = currently_share
            total += currently_share

        return total % modulo
