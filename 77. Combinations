#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(C(n,k) * k) complexity by time and O(C(n,k) * k) by space, where C(n,k) is the number of combinations of length k from n

If they had written that you can't use built-in libraries, the solution would have been longer, but this is a task on knowledge of itertools
"""

class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        return list(combinations([elem for elem in range(1, n + 1)], k))



# Alternative solution
class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        res = []
        stack = [(1, [])]  # (start, path)
        
        while stack:
            start, path = stack.pop()
            if len(path) == k:
                res.append(path)
                continue
            for num in range(start, n + 1):
                stack.append((num + 1, path + [num]))
        
        return res
