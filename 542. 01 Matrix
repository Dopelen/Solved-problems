#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * m) complexity by time and O(n * m) by space.

Identical to today's task, decided to do it at the same time.
We go around from each zero, forming a matrix for the answer.
"""

class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        rows, cols = len(mat), len(mat[0])
        order = deque()
        max_val = rows * cols

        for i in range(rows):
            for j in range(cols):
                if mat[i][j] == 0:
                    order.append((i, j))
                else:
                    mat[i][j] = max_val

        while order:
            row, col = order.popleft()
            for dr, dc in directions:
                nr, nc = row + dr, col + dc
                if 0 <= nr < rows and 0 <= nc < cols and mat[nr][nc] > mat[row][col] + 1:
                    order.append((nr, nc))
                    mat[nr][nc] = mat[row][col] + 1

        return mat
