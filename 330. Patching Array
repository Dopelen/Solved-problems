#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(1) by space.

This is a daily task of high complexity. 
I didn’t figure out how to solve it myself, and thank God I didn’t get into it headlong, because I would have piled up hundreds of loops with combinations through the IterTools library.
But if you have a mathematical sense, if you take a closer look, you can understand that you can only cover some small number that you don’t have by adding a number equal to it.
To answer, we need to close all numbers from 1 to n.
There is no way we can cover 1 without having it in the original list -> We need to add 1. 
Next we move down the list -> We need to close 2 -> To close 2 we need either 1 more unit, or 2. 
Moreover, in the case of 2, we guarantee that we will also close the number following the two, because the combination (1, 1) covers the sequence (1, 2) while (1, 2) -> (1, 2, 3).
Another interesting observation is that by adding a number, you cover all subsequent 2*numbers of the number! Why?
Because the nature of the increasing sequence guarantees us that the resulting sums of the previous terms with the current one will cover this interval.
[1] -> [1]
[1, 2] -> [1, 2, 3]
[1, 2, 3] -> [1, 2, 3, 4(3 + 1), 5(3 + 2), 6(3 + 2 + 1)]
"""

class Solution:
    def minPatches(self, nums: List[int], n: int) -> int:
        need = 1
        result = i = 0
        while need <= n:
            if i < len(nums) and nums[i] <= need:
                need += nums[i]
                i += 1
            else:
                need += need
                result += 1
        return result
