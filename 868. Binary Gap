#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

I don't know if the time will come when I'll use bitwise magic instead of parsing bitstrings.

"""

class Solution:
    def binaryGap(self, n: int) -> int:
        st = bin(n)[2:]
        size = len(st)
        answer = 0
        at_least_one = False
        for i in range(size):
            if st[i] == "1":
                cur_max = 1
                while i < size-1:
                    i += 1
                    if st[i] == "0":
                        cur_max += 1
                    else:
                        answer = max(answer, cur_max)
                        break
        return answer
