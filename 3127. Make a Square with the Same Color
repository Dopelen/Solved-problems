#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(1) complexity by time and O(1) by space. (We have an explicit matrix constraint and for each position we have several constant checks, so in general this solution works for O(1))

I don't like that the solution turned out to be so big. 
I just checked all possible fours. 
If the matrix were larger, it would be possible to calculate the sum of the window, which would shift along the matrix.

"""

class Solution:
    def canMakeSquare(self, grid: List[List[str]]) -> bool:
        code = {"B" : 1, "W" : 0}
        first = sum([code[grid[0][0]], code[grid[0][1]], code[grid[1][0]], code[grid[1][1]]])
        second = sum([code[grid[0][2]], code[grid[0][1]], code[grid[1][2]], code[grid[1][1]]])
        third = sum([code[grid[2][0]], code[grid[1][0]], code[grid[2][1]], code[grid[1][1]]])
        fourth = sum([code[grid[2][2]], code[grid[1][2]], code[grid[2][1]], code[grid[1][1]]])
        return any(x in {0, 1, 3, 4} for x in [first, second, third, fourth])
