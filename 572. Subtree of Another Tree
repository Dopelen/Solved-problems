"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 2) complexity by time and O(n) by space.

We create an additional function that checks the subtree for equality, and with another function we move through the tree itself.
"""

class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if not root and not subRoot:
            return True
        elif not root or not subRoot:
            return False
        
        if root.val == subRoot.val:
            if self.isSubtree(root.left,subRoot.left) and self.isSubtree(root.right,subRoot.right):
                return True
        else:
            return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)
