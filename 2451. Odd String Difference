#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * m) complexity by time and O(n + m) by space. Where m is len(words[0])

I believe that tasks, the main part of which is understanding what they actually want from you, are bad tasks.
And this is one of them.
The only small joy I had here was the interrupt code when we get enough elements to compare 
And the output through the next(generator) where we stop iterating at the first match.

"""

class Solution:
    def oddString(self, words: List[str]) -> str:
        d = {el:i for i, el in enumerate(string.ascii_lowercase)}
        ans = defaultdict(list)
        n = len(words[0])
        for i in range(len(words)):
            cur = []
            for e in range(n - 1):
                cur.append(d[words[i][e + 1]] - d[words[i][e]])
            ans[tuple(cur)].append(i)
            if len(ans) > 1 and i > 1:
                break
        return words[ans[next(key for key, value in ans.items() if len(value) == 1)][0]]
