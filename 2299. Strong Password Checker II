#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(possible symbols) by space.

I solved it in two ways, both seem simple.

"""

# Regex (If you put a hyphen in a regular expression other than the edge, your regular expression won't work because it will read it as part of the range! A hilarious waste of hours)
class Solution:
    def strongPasswordCheckerII(self, password: str) -> bool:
        pattern = r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()+-])(?!.*(.)\1)[a-zA-Z\d!@#$%^&*()+-]{8,}$'
        return re.match(pattern, password)

# Straightforward
class Solution:
    def strongPasswordCheckerII(self, password: str) -> bool:
        if len(password) < 7:
            return False
        lower = upper = symbols = digits = False
        for i in range(len(password)):
            if not lower:
                if password[i] in ascii_lowercase:
                    lower = True
            if not upper:
                if password[i] in ascii_uppercase:
                    upper = True
            if not symbols:
                if password[i] in "!@#$%^&*()-+":
                    symbols = True
            if not digits:
                if password[i] in '0123456789':
                    digits = True
            if i != 0:
                if password[i] == password[i-1]:
                    return False
        return lower == upper == symbols == digits == True
