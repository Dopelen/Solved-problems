#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

The problem has a tricky and nice solution.

We maintain two values:
The maximum value of the pair encountered so far (max_score).
The maximum value of the left side of the pair (values[i] + i), where i is the index of the element considered before the current one.

We check if the current maximum value of the left side (values[i] + i) with the current element (values[j] - j) gives a new maximum pair.
If so, we update the maximum pair (max_score).
We update the maximum value of the left side (values[i] + i) to consider the current element for the next iterations.
"""

class Solution:
    def maxScoreSightseeingPair(self, values: List[int]) -> int:
        max_score = 0
        max_i_value = values[0]
        for j in range(1, len(values)):
            max_score = max(max_score, max_i_value + values[j] - j)
            max_i_value = max(max_i_value, values[j] + j)
        return max_score
