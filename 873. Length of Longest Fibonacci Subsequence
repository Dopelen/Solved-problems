#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 2) complexity by time and O(n ** 2) by space.

We have a limit of 1000 elements, so even quadratic time complexity will pass the time limit.
To check for the presence of the next element, I use a set and simply iterate over all possible combinations of the start, calculating the max sequence length for each.
"""

class Solution:
    def lenLongestFibSubseq(self, arr: List[int]) -> int:
        longest = 0
        all_values = set(arr)
        size = len(arr)

        def calculate_len(x, y):
            cur_len = 2
            new_val = x + y
            while new_val in all_values:
                x, y = y, new_val
                cur_len += 1
                new_val = x + y
            return cur_len

        for i in range(size):
            for j in range(i + 1, size):
                longest = max(longest, calculate_len(arr[i], arr[j]))

        return longest if longest > 2 else 0
