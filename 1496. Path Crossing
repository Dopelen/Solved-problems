#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on letcode.
This program have O(n) complexity by time and O(n) complexity by space for every unique pair of coordinates which we store.

I thought hard about the problem and came up with a cool solution using tuples as keys in a dictionary!
It turned out very quickly. It is good when it's good"""

class Solution:
    def isPathCrossing(self, path):
        move = {"N": 1, "S": -1, "E": 1, "W": -1}
        positions, current = {(0,0):1}, [0,0]
        for elem in path:
            if elem == "N" or elem == "S":
                current[-1] += move[elem]
            else:
                current[0] += move[elem]
            check = (current[0], current[-1])
            if positions.get(check) != None:
                return True
            positions[check] = 1
        return False
