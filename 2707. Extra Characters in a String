#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n ** 2) complexity by time and O(n) by space.

I think I need a HARD intensive course on dynamic programming, because its patterns are not in my subcortex.
As a result, I spent an hour fiddling with similar problems and could hardly understand what was going on here.
"""

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        size = len(s) + 1
        dp =[size] * size
        dp[0] = 0
        dictionary = set(dictionary)
        for i in range(1, size):
            dp[i] = dp[i - 1] + 1
            for j in range(1, i + 1):
                if s[i - j:i] in dictionary:
                    dp[i] = min(dp[i], dp[i - j])
        return dp[-1]
