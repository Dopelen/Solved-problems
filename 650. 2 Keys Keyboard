#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(1) by space.

An interesting problem, the main approach to solving which is analyzing the divisors of a given number.
At some point, I even wanted to solve it using dynamic programming, because different divisor options are possible, for example for the number 6: (1 + 1) * 3 / (1 + 1 + 1) * 2
But if you think about it, choosing the smallest divisor of a number will always be the best greedy step, which guarantees us a smaller number of operations. 
Based on this, it is enough to write a cycle for each divisor and divide our number, with a maximum number size of 1000, this is acceptable in complexity.
"""

class Solution:
    def minSteps(self, n: int) -> int:
        if n == 1:
            return 0 
        answer = 0
        factor = 2
        while n > 1:
            while n % factor == 0:
                answer += factor
                n //= factor
            factor += 1
        return answer
