#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * m) complexity by time and O(n * m) by space.

I figured out the principle of the solution, but I couldn't write it down completely.
The trick is to imagine each cell as a graph node, and each move through the wall beyond the edge with weight 1 (the rest of the edges with weight 0).
After that, by walking along the graph, you can find the "shortest path".
Good problem
"""

# https://leetcode.com/problems/minimum-obstacle-removal-to-reach-corner/solutions/6090483/minimum-obstacle-removal-bfs-approach-beats-100-c-python-java-javascript/
class Solution:
    def minimumObstacles(self, grid: List[List[int]]) -> int:
        height, width = len(grid), len(grid[0])
        distance = [[float('inf')] * width for _ in range(height)]
        dq = deque()

        distance[0][0] = 0
        dq.appendleft((0, 0))
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]

        while dq:
            x, y = dq.popleft()
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < height and 0 <= ny < width:
                    newDist = distance[x][y] + grid[nx][ny]
                    if newDist < distance[nx][ny]:
                        distance[nx][ny] = newDist
                        if grid[nx][ny] == 0:
                            dq.appendleft((nx, ny))
                        else:
                            dq.append((nx, ny))
        return distance[height-1][width-1]
