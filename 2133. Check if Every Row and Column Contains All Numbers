#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.

It turned out to be a rather “heavy” solution.
First I create a matrix in which the rows are the columns of the original matrix, and then I check each row for the elements I need.

"""

# This program has O( n ** 3 ) complexity by time (for every line in matrix we initiating n checks every of them is n) and O(n * n) by space.
class Solution:
    def checkValid(self, matrix: List[List[int]]) -> bool:
        n = len(matrix)
        mat_2 = [list(x) for x in zip(*matrix)]
        for m1, m2 in zip(matrix, mat_2):
            for i in range(1, n + 1):
                if i not in m1 or i not in m2:
                    return False
        return True


# This program has O( n ** 2 ) complexity by time and O(n * n) by space.
# I was not satisfied with the previous complexity and decided to speed up the solution. 
# In it, I converted each line into the sum of its elements and the number of unique elements.
# Thus, with an equal number of elements and an equal sum, knowing that we do not have negative numbers, I can check the matrix fragments for identity and speed up the solution.
class Solution:
    def checkValid(self, matrix: List[List[int]]) -> bool:
        n = len(matrix)
        mat_2 = [[sum(set(x)), len(x)] for x in zip(*matrix)]
        matrix = [[sum(set(m)), len(m)] for m in matrix]
        for m1, m2 in zip(matrix, mat_2):
            cur_v = sum(range(n + 1))
            if (m1[0] != cur_v or m2[0] != cur_v) or (m1[1] != n or m2[1] != n):
                return False        
        return True
