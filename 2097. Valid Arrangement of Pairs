#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
 This program has O(n) complexity by time and O(n).

Unfortunately, I don't have much knowledge in the field of graph traversal algorithms yet, so I have to peek.
The idea is to use Hierholtzer's algorithm to find the Euler path through all nodes using all edges.
To do this, we first find the start: the graph node from which more edges come out than come in.
We add it to the stack and start traversing from it. In essence, we take any edge coming from it and try to build our graph.
Then we repeat the procedure for the new top of the stack.
"""

# https://leetcode.com/problems/valid-arrangement-of-pairs/
class Solution:
    def validArrangement(self, pairs: List[List[int]]) -> List[List[int]]:
        graph = defaultdict(list)
        degree = defaultdict(int) # net out degree 
        for x, y in pairs: 
            graph[x].append(y)
            degree[x] += 1
            degree[y] -= 1
                
        for k in degree: 
            if degree[k] == 1: 
                x = k
                break 
                
        ans = []
        stack = [x]
        while stack: 
            while graph[stack[-1]]: 
                stack.append(graph[stack[-1]].pop())
            ans.append(stack.pop())
        ans.reverse()
        return [[ans[i], ans[i+1]] for i in range(len(ans)-1)]
