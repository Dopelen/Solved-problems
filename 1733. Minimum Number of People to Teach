#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(m * k + n) complexity by time and O(n + m) by space.

I quickly realized two things, first, that it can be solved with quadratic complexity by simple enumeration, and second, that there is a faster solution.
I started with a brute-force solution.
After thinking about it, I realized that you can find the most popular language among people who need to learn. 
That would be optimization.
"""

# After optimization O(m * k + n))
class Solution:
    def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:
        languages = [set(elem) for elem in languages]
        need_training = set(n * k)
        for user, friend in friendships:
            user -= 1
            friend -= 1
            if not (languages[user] & languages[friend]):
                need_training.add(user)
                need_training.add(friend)
        if not need_training:
            return 0

        common_language = defaultdict(int)
        for person in need_training:
            for language in languages[person]:
                common_language[language] += 1

        most_common_lang = max(common_language.values())
        return len(need_training) - most_common_lang


# Brute-force O(n * m * k)
class Solution:
    def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:
        min_users_to_teach = math.inf
        languages = [set(elem) for elem in languages]

        for language in range(1, n + 1):
            users_to_teach = 0
            trained = set()
            for user, friend in friendships:
                if languages[user - 1] & languages[friend - 1]:
                    continue
                if (user not in trained) and (language not in languages[user - 1]):
                    users_to_teach += 1
                    trained.add(user)
                if (friend not in trained) and (language not in languages[friend - 1]):
                    users_to_teach += 1
                    trained.add(friend)

            min_users_to_teach = min(min_users_to_teach, users_to_teach)

        return min_users_to_teach
