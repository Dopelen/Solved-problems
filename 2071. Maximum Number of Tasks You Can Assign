#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(NLogN+MLogM+(Min(N,M)+M)LogMin(N,M)) complexity by time and O(n) by space. 

I suffered for an hour and came up against the fact that I can't solve it greedily. 
Because by assigning strong workers to weak tasks, I can potentially lose those tasks that only strong ones could do. 
For some reason, it seemed to me that it was advantageous to let a worker do a task without a tablet, and this passes almost all test cases, but this approach is not optimal, because in some cases, it does not maximize tasks

I could have written the solution itself, but for some reason I didn't realize that this approach could be used. 
We simply use binary search to find the number of possible closed tasks, and check whether it is possible to close that many, if so, we shift them and look for a larger number.
"""

# https://leetcode.com/problems/maximum-number-of-tasks-you-can-assign/solutions/6703789/beats-100-maximize-task-assignments-with-pills-and-strength-boosts/?envType=daily-question&envId=2025-05-01
class Solution:
    def maxTaskAssign(self, tasks, workers, pills, strength):
        tasks.sort()
        workers.sort()

        def can_assign(mid):
            boosted = deque()
            w = len(workers) - 1
            free_pills = pills

            for t in reversed(tasks[:mid]):
                if boosted and boosted[0] >= t:
                    boosted.popleft()
                elif w >= 0 and workers[w] >= t:
                    w -= 1
                else:
                    while w >= 0 and workers[w] + strength >= t:
                        boosted.append(workers[w])
                        w -= 1
                    if not boosted or free_pills == 0:
                        return False
                    boosted.pop()
                    free_pills -= 1
            return True

        low, high = 0, min(len(tasks), len(workers))
        while low < high:
            mid = (low + high + 1) // 2
            if can_assign(mid):
                low = mid
            else:
                high = mid - 1
        return low
