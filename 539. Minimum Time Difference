#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n(log(n)) complexity by time and O(n) by space.

A bit sloppy, but I'm glad I got it done pretty quickly. 
I racked my brains a bit because of the edge elements, but quickly remembered the trick of multiplying an array by 2 if we have a self-looped array in the problem.

In this problem we have a "safe step" because in a sorted list we guarantee that two adjacent elements will have the minimum possible difference between them, 
because with all subsequent elements the difference will be greater than with the adjacent one in both directions.
"""

# initial Solution
class Solution:
    def findMinDifference(self, timePoints: List[str]) -> int:
        size = len(timePoints)
        answer = math.inf
        if len(set(timePoints)) < size:
            return 0
        sec_timePoints = []
        for elem in timePoints:
            hours, minutes = elem.split(":")
            time_sec = int(hours) * 3600 + int(minutes) * 60
            sec_timePoints.append(time_sec)
        sec_timePoints.sort()
        sec_timePoints.append(sec_timePoints[0] + 86400)
        for index, elem in enumerate(sec_timePoints[1:size], start=1):
            answer = min(answer, abs(elem - sec_timePoints[index - 1]),
                         abs(elem - sec_timePoints[index + 1]))
        return answer // 60


# After refactoring
class Solution:
    def findMinDifference(self, timePoints: List[str]) -> int:
        if len(set(timePoints)) < len(timePoints):
            return 0
        minutes = sorted(int(tp[:2]) * 60 + int(tp[3:]) for tp in timePoints)
        minutes.append(minutes[0] + 1440)
        return min(minutes[i] - minutes[i - 1] for i in range(1, len(minutes)))
