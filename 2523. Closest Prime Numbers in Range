#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(Nâˆ—Log(Log(N))) complexity by time and O(n) by space.

I used the sieve of Eratosthenes, but it doesn't seem to be the fastest way.

# The optimal Solution is very cool!
"""

# Mine
class Solution:
    def closestPrimes(self, left: int, right: int) -> List[int]:
        min_val = [math.inf, math.inf]

        def sieve_of_eratosthenes(n):
            is_prime = [True] * (n + 1)
            is_prime[0] = is_prime[1] = False
            for p in range(2, int(n ** 0.5) + 1):
                if is_prime[p]:
                    for multiple in range(p * p, n + 1, p):
                        is_prime[multiple] = False
            return [p for p in range(n + 1) if is_prime[p] and p >= left]

        primes = sieve_of_eratosthenes(right)
        for i in range(len(primes) - 1):
            if primes[i + 1] - primes[i] < min_val[0]:
                min_val = [primes[i + 1] - primes[i], i]

        return [primes[min_val[1]], primes[min_val[1] + 1]] if math.inf not in min_val else [-1, -1]



# Optimal
# https://leetcode.com/problems/closest-prime-numbers-in-range/editorial/
class Solution:
    def isPrime(self, num):
        if num < 2:
            return False
        if num == 2 or num == 3:
            return True
        if num % 2 == 0:
            return False
        divisor = 3
        while divisor * divisor <= num:
            if num % divisor == 0:
                return False
            divisor += 2
        return True

    def closestPrimes(self, left, right):
        prev_prime = -1
        closestA = -1
        closestB = -1
        min_difference = float("inf")

        # Iterate over the range of numbers and find primes
        for candidate in range(left, right + 1):
            if self.isPrime(candidate):
                if prev_prime != -1:
                    difference = candidate - prev_prime
                    if difference < min_difference:
                        min_difference = difference
                        closestA = prev_prime
                        closestB = candidate
                    if difference == 1 or difference == 2:
                        return [prev_prime, candidate]
                prev_prime = candidate

        return [closestA, closestB] if closestA != -1 else [-1, -1]

