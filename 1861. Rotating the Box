#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n * m) complexity by time and O(n * m) by space.

Conceptually, it's not a very difficult task, just laborious.
There are two main subtasks here:
The first is to flip the matrix (you can use a little trick with unpacking via zip for this)
The second is to move the stones according to the condition (I moved them to the right before flipping, because for my brain it's easier than moving them down the columns).
"""

class Solution:
    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:
        height, width = len(box), len(box[0])

        def change_row(j):
            nonlocal stones
            while stones:
                if box[i][j] in {".", "#"}:
                    box[i][j] = "#"
                    stones -= 1
                j -= 1
            while j != -1 and box[i][j] != "*":
                box[i][j] = "."
                j -= 1

        for i in range(height):
            stones = 0
            for j in range(width):
                match box[i][j]:
                    case "*":
                        change_row(j)
                    case "#":
                        stones += 1
            if stones:
                change_row(j)

        return [list(row) for row in zip(*box[::-1])]
