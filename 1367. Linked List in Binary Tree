#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(2 ** n) complexity by time and O(n) by space.

Wrote the solution quickly - debugged for a long time.
Initially, I made a lot of unnecessary recursive calls, had to rewrite this part.

The idea is to check the subtrees for a given node, and if there are no matches, move on to the next ones. 
In my original solution, this happened in parallel, which significantly slowed down the algorithm, 
in the "thoughtful version" the check of additional subtrees occurs only if no matches were found for the current node.
"""

# Good Solution O(still 2 ** n?)
class Solution:
    def isSubPath(self, head, root):
        def helper(head, root):
            if not head: 
                return True
            if not root or head.val != root.val: 
                return False
            left = helper(head.next, root.left)
            right = helper(head.next, root.right)
            return left or right 

        if not root: 
            return False
        if helper(head, root): 
            return True
        return self.isSubPath(head, root.left) or self.isSubPath(head, root.right)



# initial Solution with huge time complexity (2 ** n)
class Solution:
    def isSubPath(self, head: Optional[ListNode], root: Optional[TreeNode]) -> bool:
        def recursive_sub_path(head, root):
            if not head:
                return True
            if not root:
                return False
            if head.val == root.val:
                if recursive_sub_path(head.next, root.left) or recursive_sub_path(head.next, root.right):
                    return True
            return recursive_sub_path(head, root.left) or recursive_sub_path(head, root.right)
