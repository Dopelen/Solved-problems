#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(1) by space.

In problems involving various sequences, I like to use a "while". Specifically here we don't need to iterate through all the elements,
because if the increasing sequence ends, the same sequence started from the second element of this sequence is guaranteed to be smaller, 
so we can move directly to the element after sequence and reducing the number of iterations in comparison with using "for".

"""

class Solution:
    def maxAscendingSum(self, nums: List[int]) -> int:
        size = len(nums)
        if size == 1: return nums[0]
        i = ans = 0
        while i < size - 1:
            sub_sum = nums[i]
            while i < size - 1 and nums[i] < nums[i + 1]:
                sub_sum += nums[i + 1]
                i += 1
            ans = max(ans, sub_sum)
            i += 1
        return ans
