#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
 This program has O(n) complexity by time and O(n).

I wouldn't say that I thought well today, but not bad either!
I chose a reliable step for myself, which is that we will not be able to break the sorting if we take the maximum possible prime number from the given ones each time.
If after its subtraction the sorting condition is not met, then it is impossible to sort the array in accordance with the condition.
Such a pleasant task.
"""

# Before refactoring
class Solution:
    def primeSubOperation(self, nums: List[int]) -> bool:
        size = len(nums)
        primes = [0, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
                  103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
                  211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
                  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
                  449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
                  587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
                  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,
                  853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,
                  991, 997]
        for index, elem in enumerate(nums):
            position = bisect_left(primes, elem) - 1
            if index == 0:
                nums[index] -= primes[position]
            else:
                if index == size - 1 and nums[index] > nums[index - 1]:
                    break
                while (position > 0) and ((nums[index] - primes[position]) <= nums[index - 1]):
                    position -= 1
                nums[index] -= primes[position]
                if nums[index] <= nums[index - 1]:
                    return False
        return True
