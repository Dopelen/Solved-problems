#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
I think this programm has O(n**2) bc we use insert O(n) for every elem in range k, and its bigger then O(n(log(n))) sorting complexity by time and O(n) by space.

I don't understand why the rounding function doesn't work the way I expect it to.

"""

class Solution:
    def pickGifts(self, gifts: List[int], k: int) -> int:
        gifts = sorted(gifts)
        processed = []
        for elem in range(k):
            if not gifts:
                gifts = processed
                processed = []
            if processed:
                if gifts[-1] > processed[-1]:
                    val = math.floor(gifts.pop() ** 0.5)
                else:
                    val = math.floor(processed.pop() ** 0.5)
            else:
                val = math.floor(gifts.pop() ** 0.5)
            processed.insert(bisect_right(processed, val), val)
        return sum(gifts) + sum(processed)
