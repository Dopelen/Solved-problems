#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on letcode.
This program has O(n) complexity by time and O(n) by space.

These are two solutions that do almost the same thing, but the second one is clearer

"""

class Solution:
    def maximumOddBinaryNumber(self, s: str) -> str:
        bits = Counter(s)
        if bits["1"] == 0:
            return s
        elif bits["1"] == 1:
            return("0" * (bits["0"]) + "1")
        else:
            return  "1" * (bits["1"] - 1) + "0" * (bits["0"])  + "1"

class Solution:
    def maximumOddBinaryNumber(self, s: str) -> str:
        ones = 0
        zeroes = 0
        for symbol in s:
            if symbol == "1":
                ones += 1
            else:
                zeroes += 1
        return "1" * (ones - 1) + "0" * (zeroes)  + "1"
