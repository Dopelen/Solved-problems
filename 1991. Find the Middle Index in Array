#!/usr/bin/python
"""You can see the description of the task using the code specified in the title on leetcode.
This program has O(n) complexity by time and O(n) by space.

I liked my solution using prefix and suffix sums, but adding the first elements bothers me.

"""

class Solution:
    def findMiddleIndex(self, nums: List[int]) -> int:
        size = len(nums)
        if size == 1:
            return 0
        pref_list = [[0, 0] for elem in range(size)]
        for ind in range(1, size - 1):
            pref_list[ind][0] = nums[ind - 1] + pref_list[ind - 1][0]
            pref_list[size - ind - 1][1] = nums[size - ind] + pref_list[size - ind][1]
        pref_list[0][1], pref_list[size - 1][0] = pref_list[1][1] + nums[1], pref_list[size - 2][0] + nums[size - 2]

        for i in range(size):
            if pref_list[i][0] == pref_list[i][1]:
                return i
        return -1

# Without storing elements (https://leetcode.com/problems/find-the-middle-index-in-array/solutions/1540578/python-simple-o-n-solution/)
# O(1) by space btw!
def findMiddleIndex(self, nums: List[int]) -> int:               
	leftSum = 0
	rightSum = sum(nums)
	for i in range(len(nums)):
		if leftSum == rightSum - nums[i]:
			return i
		leftSum += nums[i]
		rightSum -= nums[i]
	return -1
